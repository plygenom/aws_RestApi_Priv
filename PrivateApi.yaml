AWSTemplateFormatVersion: 2010-09-09
Description: API Gateway -> Lambda -> DynamoDB
############
# Mappings #
############
Mappings:
  LambdaSourceCodeS3Mappings:
    Details:
      BucketName: plygenom-source-code
      SelectFnKey: LambdaFunction/select_fn.zip
      UpsertFnKey: LambdaFunction/upsert_fn.zip
      DeleteFnKey: LambdaFunction/delete_fn.zip
      LayerKey: LambdaFunction/layer.zip
  SecurityGroupEndpointMappings:
    Details:
# modify the details according to the VPC endpoint
      PlS3: "pl-xxxxx"
      PlDynamo: "pl-xxxx"
      VpcPrivIp: "10.0.0.0/8"
##############
# Parameters #
##############
Parameters:
  ResourcePrefix:
    Description: Resource prefix
    Type: String
  Subnets:
    Description: Subnet ID's
    Type: List<AWS::EC2::Subnet::Id>
    ConstraintDescription: Subnet
  VpcId:
    Description: VpcId
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: VpcId
  S3BucketDetails:
    Description: S3 bucket where lambda function code is available
    Type: String
    AllowedValues:
      - LambdaSourceCodeS3Mappings
  EndpointDetails:
    Description: Modify the details according to your VPC endpoint in the mappings section of cfn code.
    Type: String
    AllowedValues:
      - SecurityGroupEndpointMappings
#############
# Metadata #
#############
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "mapping:S3 bucket details"
        Parameters:
          - S3BucketDetails
      - Label:
          default: "mapping:Endpoint prefix-list details"
        Parameters:
          - EndpointDetails
      - Label:
          default: "VPC details"
        Parameters:
          - VpcId
          - Subnets
    ParameterLabels:
      ResourcePrefix:
        default: "pre-fix to use for all the Resource created by this cfn"
#############
# Resources #
#############
Resources:
# Common resource
  CloudWatchLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Ref 'ResourcePrefix'
      RetentionInDays: '7'
  CloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
      RoleName: !Join [ "-", [ !Ref 'ResourcePrefix',CloudWatchRole ] ]
  APIGatewayPushToCloudWatch:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt 'CloudWatchRole.Arn'
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ "-", [ !Ref 'ResourcePrefix',SecurityGroup ] ]
      GroupDescription: Allow lambda to access dynamoDB via endpoint
      VpcId: !Ref VpcId
      SecurityGroupIngress: [ ]
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          DestinationPrefixListId: !FindInMap [ !Ref EndpointDetails,Details,PlS3 ]
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          DestinationPrefixListId: !FindInMap [ !Ref EndpointDetails,Details,PlDynamo ]
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: !FindInMap [ !Ref EndpointDetails,Details,VpcPrivIp ]
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref 'ResourcePrefix',SecurityGroup ] ]
# Rest api dynamoDB integration via lambda
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: 'PAY_PER_REQUEST'
      AttributeDefinitions:
        - AttributeName: "UserId"
          AttributeType: "S"
        - AttributeName: "Department"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "UserId"
          KeyType: "HASH"
        - AttributeName: "Department"
          KeyType: "RANGE"
      TableName: !Join [ "-", [ !Ref 'ResourcePrefix',Employee ] ]
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: 'true'
      GlobalSecondaryIndexes:
        - IndexName: "Id_GSI"
          KeySchema:
            - AttributeName: "UserId"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "Department"
            ProjectionType: "INCLUDE"
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref 'ResourcePrefix',DynamoDB ] ]
  LambdaApiRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess'
      Policies:
        - PolicyName: Allow_DynamoDB_CloudWatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: DynamoDB
                Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub
                    - 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBName}'
                    - { DynamoDBName: !Ref 'DynamoDBTable' }
                  - !Sub
                    - 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBName}/*'
                    - { DynamoDBName: !Ref 'DynamoDBTable' }
              - Sid: CloudWatchLogGroup
                Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogStream
                Resource:
                  - !Sub
                    - 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroupName}:*'
                    - { LogGroupName: !Ref 'CloudWatchLogGroup' }
                  - !Sub
                    - 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroupName}:*/*'
                    - { LogGroupName: !Ref 'CloudWatchLogGroup' }
      RoleName: !Join [ "-", [ !Ref 'ResourcePrefix',Role ] ]
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref 'ResourcePrefix',Role ] ]
  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - nodejs12.x
      Content:
        S3Bucket: !FindInMap [!Ref S3BucketDetails,Details,BucketName]
        S3Key: !FindInMap [!Ref S3BucketDetails,Details,LayerKey]
      Description: Loggroup layer
      LayerName: !Join [ "-", [ !Ref 'ResourcePrefix', CloudWatch,Layer ] ]
  LambdaSelectFn:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join [ "-", [ !Ref 'ResourcePrefix', LambdaSelectFn ] ]
      Handler: select.handler
      Role: !GetAtt 'LambdaApiRole.Arn'
      Code:
        S3Bucket: !FindInMap [!Ref S3BucketDetails,Details,BucketName]
        S3Key: !FindInMap [!Ref S3BucketDetails,Details,SelectFnKey]
      Runtime: nodejs12.x
      MemorySize: 256
      Timeout: 25
      VpcConfig:
        SecurityGroupIds: [!GetAtt 'LambdaSecurityGroup.GroupId']
        SubnetIds: !Ref 'Subnets'
      Layers: [!Ref 'LambdaLayer']
      Environment:
        Variables:
          LOGGROUP_NAME: !Ref 'CloudWatchLogGroup'
          TABLE_NAME: !Ref 'DynamoDBTable'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref 'ResourcePrefix', LambdaSelectFn ] ]
  LambdaUpsertFn:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join [ "-", [ !Ref 'ResourcePrefix', LambdaUpsertFn ] ]
      Handler: upsert.handler
      Role: !GetAtt 'LambdaApiRole.Arn'
      Code:
        S3Bucket: !FindInMap [!Ref S3BucketDetails,Details,BucketName]
        S3Key: !FindInMap [!Ref S3BucketDetails,Details,UpsertFnKey]
      Runtime: nodejs12.x
      MemorySize: 256
      Timeout: 25
      VpcConfig:
        SecurityGroupIds: [ !GetAtt 'LambdaSecurityGroup.GroupId' ]
        SubnetIds: !Ref 'Subnets'
      Layers: [ !Ref 'LambdaLayer' ]
      Environment:
        Variables:
          LOGGROUP_NAME: !Ref 'CloudWatchLogGroup'
          TABLE_NAME: !Ref 'DynamoDBTable'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref 'ResourcePrefix', LambdaUpsertFn ] ]
  LambdaDeleteFn:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join [ "-", [ !Ref 'ResourcePrefix', DeleteFnKey ] ]
      Handler: delete.handler
      Role: !GetAtt 'LambdaApiRole.Arn'
      Code:
        S3Bucket: !FindInMap [ !Ref S3BucketDetails,Details,BucketName ]
        S3Key: !FindInMap [ !Ref S3BucketDetails,Details,DeleteFnKey ]
      Runtime: nodejs12.x
      MemorySize: 256
      Timeout: 25
      VpcConfig:
        SecurityGroupIds: [ !GetAtt 'LambdaSecurityGroup.GroupId' ]
        SubnetIds: !Ref 'Subnets'
      Layers: [ !Ref 'LambdaLayer' ]
      Environment:
        Variables:
          LOGGROUP_NAME: !Ref 'CloudWatchLogGroup'
          TABLE_NAME: !Ref 'DynamoDBTable'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref 'ResourcePrefix', Function3 ] ]
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
          - 'PRIVATE'
      Name: !Ref 'ResourcePrefix'
      Description: private rest-api
      Policy:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowExecuteApi
            Effect: Allow
            Principal: '*'
            Action:
              - execute-api:Invoke
            Resource: !Join ["",[ 'execute-api:/', '*']]
          - Sid: DenyExecuteApi
            Effect: Deny
            Principal: "*"
            Action:
              - execute-api:Invoke
            Resource: !Join ["",[ 'execute-api:/', '*']]
            Condition:
              StringNotEquals:
                aws:SourceVpc: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref 'ResourcePrefix', rest-api ] ]
  SelectResource:
    DependsOn: RestApi
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: 'select'
  UpsertResource:
    DependsOn: RestApi
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: 'upsert'
  DeleteResource:
    DependsOn: RestApi
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: 'delete'
  SelectMethod:
    DependsOn: LambdaSelectFn
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref SelectResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.UserId: true
      MethodResponses:
        - ResponseModels:
            application/json: 'Empty'
          StatusCode: 200
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
          - { LambdaArn: !GetAtt 'LambdaSelectFn.Arn' }
        PassthroughBehavior:  WHEN_NO_MATCH
        RequestTemplates:
          application/json: |
            ##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
            ##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload
            #set($allParams = $input.params())
            {
            "body" : $input.json('$'),
            "params" : {
            #foreach($type in $allParams.keySet())
                #set($params = $allParams.get($type))
            "$type" : {
                #foreach($paramName in $params.keySet())
                "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                    #if($foreach.hasNext),#end
                #end
            }
                #if($foreach.hasNext),#end
            #end
            },
            "stageVariables" : {
            #foreach($key in $stageVariables.keySet())
            "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                #if($foreach.hasNext),#end
            #end
            },
            "context" : {
                "accountId" : "$context.identity.accountId",
                "apiId" : "$context.apiId",
                "apiKey" : "$context.identity.apiKey",
                "authorizerPrincipalId" : "$context.authorizer.principalId",
                "caller" : "$context.identity.caller",
                "cognitoAuthenticationProvider" : "$context.identity.cognitoAuthenticationProvider",
                "cognitoAuthenticationType" : "$context.identity.cognitoAuthenticationType",
                "cognitoIdentityId" : "$context.identity.cognitoIdentityId",
                "cognitoIdentityPoolId" : "$context.identity.cognitoIdentityPoolId",
                "httpMethod" : "$context.httpMethod",
                "stage" : "$context.stage",
                "sourceIp" : "$context.identity.sourceIp",
                "user" : "$context.identity.user",
                "userAgent" : "$context.identity.userAgent",
                "userArn" : "$context.identity.userArn",
                "requestId" : "$context.requestId",
                "resourceId" : "$context.resourceId",
                "resourcePath" : "$context.resourcePath"
                }
            }
        IntegrationResponses:
          - ResponseTemplates:
              application/json: ""
            StatusCode: 200
  UpsertMethod:
    DependsOn: LambdaUpsertFn
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref UpsertResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - ResponseModels:
            application/json: 'Empty'
          StatusCode: 200
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
          - { LambdaArn: !GetAtt 'LambdaUpsertFn.Arn' }
  DeleteMethod:
    DependsOn: LambdaDeleteFn
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref DeleteResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - ResponseModels:
            application/json: 'Empty'
          StatusCode: 200
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
          - { LambdaArn: !GetAtt 'LambdaDeleteFn.Arn' }
  RestApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - SelectMethod
      - UpsertMethod
      - DeleteMethod
    Properties:
      RestApiId: !Ref RestApi
      Description: private rest-api for DynamoDB table DML operations
      StageName: 'api'
  SelectFnResourcePolicy:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - RestApiDeployment
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "LambdaSelectFn.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/*"
  UpsertFnResourcePolicy:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - RestApiDeployment
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "LambdaUpsertFn.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/*"
  DeleteFnResourcePolicy:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - RestApiDeployment
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "LambdaDeleteFn.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/*"

###########
# Outputs #
###########
Outputs:
  LambdaApiRoleName:
    Description: Lambda Role Name
    Value: !Ref LambdaApiRole
#Cloudwatch LogGroup
  CloudWatchLogGroupName:
    Description: CloudWatch Log Group Name
    Value: !Ref CloudWatchLogGroup
  CloudWatchLogGroupArn:
    Description: CloudWatch LogGroup Arn
    Value: !GetAtt CloudWatchLogGroup.Arn